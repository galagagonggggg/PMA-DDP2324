# For most of this unit test is generated by ChatGPT
# but have to adjust and mock some of the parameter and value
# ChatGPT does not provide the correct data type and comprehensive test case enough

""" expected value all from every endpoint to return HTTP200 """

import pytest
from app import app, get_db_connection

@pytest.fixture
def client():
    """
    Create a test client using the app context.
    """
    with app.test_client() as client:
        yield client

# test on facilities landing page with 'GET' method
def test_facilities_landing(client):
    """
    Test the facilities_landing endpoint with a GET request.
    """
    response = client.get('/facilities-landing')
    assert response.status_code == 200

# test on facilities list page with 'GET' method on default parameter case which have all value as 99
def test_facilities_list(client):
    """
    Test the facilities_list endpoint with a GET request.
    """
    # adjust the right value apart from chatGPT
    response = client.get('/facilities-list/99/99/99/99/99')
    assert response.status_code == 200

# test on facilities detail page with 'GET' method with tbl_dining_profile.profile_id = 1
def test_facilities_detail(client):
    """
    Test the facilities_detail endpoint with a GET request.
    """
    response = client.get('/facilities-detail/1')
    assert response.status_code == 200

# test on facilities list page with 'GET' method on various config parameter case
def test_facilities_list_with_different_parameters(client):
    """
    Test the facilities_list endpoint with different input parameters.
    """
    # Test with different number_of_guest, open_day, open_time, is_student_union, and type_id values
    # modify the value and various case apart from chatGPT
    test_cases = [
        (2, 99, 99, 99, 99), # mock case for number_of_guest variable
        (99, "TUE" , 99, 99, 99), # mock case for open_day variable
        (99, "MON" , 10, 99, 99), # mock case for open_day and open_time variable which require to input both
        (99, 99 , 99, "True", 99), # mock case for is_student_union variable
        (99, 99, 99, 99, 1), # mock case for type_id variable
        (2, "THI", 10, "False", 2), # 1. mock case for compound filter variable 
        (5, 99, 99, "True", 4), # 2. mock case for compound filter variable
        (99, "FRI", 12, "True", 99), # 2. mock case for compound filter variable
    ]

    for number_of_guest, open_day, open_time, is_student_union, type_id in test_cases:
        response = client.get(f'/facilities-list/{number_of_guest}/{open_day}/{open_time}/{is_student_union}/{type_id}')
        assert response.status_code == 200

# test on facilities landing page with 'POST' method
def test_facilities_landing_post(client):
    """
    Test the facilities_landing endpoint with a POST request.
    """
    # Simulate a 'POST' request with sample form data
    # adjust the right value apart from chatGPT
    form_data = {
        'number-of-guest': 4,
        'open-day': 'MON',
        'open-time': 10,
        'student-union': 'True'
    }
    response = client.post('/facilities-landing', data=form_data)
    assert response.status_code == 200
    # Add assertions based on the expected response for 'POST' request

# test on facilities list page with 'POST' method
def test_facilities_list_post(client):
    """
    Test the facilities_list endpoint with a POST request.
    """
    # Simulate a 'POST' request with sample form data and parameters
    # adjust the right value apart from chatGPT
    form_data = {
        'number-of-guest': 5,
        'open-day': 'SAT',
        'open-time': 11,
        'student-union': 'False',
    }
    type_id = 1  # Example type_id
    response = client.post(f'/facilities-list/5/SAT/11/False/{type_id}', data=form_data)
    assert response.status_code == 200

if __name__ == "__main__":
    pytest.main()
